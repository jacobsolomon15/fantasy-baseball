from __future__ import division
import MySQLdb as mysql


	
	
def get_scores(worker_id, c):
	q = "select game_order, game_type, real_points, away_score, home_score, confidence, confidence_winnings from predictions where worker_id = '%s' order by game_order" % (worker_id)
	c.execute(q)
	results = c.fetchall()
	
	
	scores = {}
	
	for r in results:
		game_order = r[0]
		game_type = r[1]
		points = r[2]
		away_score = r[3]
		home_score = r[4]
		confidence = r[5]
		confidence_earnings = r[6]
		
		q = "select score_a, score_h from games where id = %s" % (str(game_type))
		c.execute(q)
	
		res = c.fetchone()
		
		real_away_score = res[0]
		real_home_score = res[1]
		
		scores[game_order] = {"game_type": game_type, 
								"real_points": points, 
								"real_away": real_away_score, 
								"real_home": real_home_score, 
								"away_score": away_score,
								"home_score": home_score,
								"confidence": confidence,
								"confidence_earnings": confidence_earnings,
								"total_points": points + confidence_earnings}

								
								
	return scores
	
def get_payment_amount(scores):
	EXCHANGE_RATE = 180 #Change this later- number of points per $2- on average subjects should earn $2 in bonuses
	total = 0
	for i in range(1,13):
		total += scores[i]["total_points"]
		
	earned = round((total / EXCHANGE_RATE), 2)
	
	return earned
	
def create_message(worker_id, assignment_id, scores, payment_amount,c):
	message = "Thank you for participating in the experiment. Your scores for the study are:\n"
	
	total_score = 0
	for i in range(1,13):
		game_line = "Game " + str(i) + ": You predicted Away: " + str(scores[i]["away_score"]) + " | Home Score: " + str(scores[i]["home_score"]) + ". The actual score was Away: " + str(scores[i]["real_away"]) + " | Home: " + str(scores[i]["real_home"]) + ". You wagered " + str(scores[i]["confidence"]) + " confidence points. Game total: " + str(scores[i]["total_points"]) + "\n"
		message = message + game_line
		total_score += scores[i]["total_points"]
	
	
	
	message = message + "\nYour total score is: " + str(total_score) + "\n"
	
	message = message + "You earned: $" + str(payment_amount) + "\n\n"
	
	## TODO- debriefing message for customizable subjects
	debrief = "In this study, we are trying to understand how what makes people trust information generated by complicated algorithms when this information is inconsistent in quality. For some games our simulator intentionally provided you with a bad recommendation in order to simulate this inconsistency. The simulator did not actually use statistical information about the teams to make predictions but instead predictions (both good and bad) were based on the actual outcomes of those games.\n"
	message = message + debrief
	
	#figure out if customization debriefing needed
	q = "select customize from subjects where worker_id = '%s'" % (worker_id)
	c.execute(q)
	
	customize = c.fetchone()[0]
	
	if customize == 1:
		debrief = "The customizations you made to the simulator did not actually affect the predictions made by the simulators. We wanted to see what choices you would make in customizing the simulator if that feature were to be implemented in such a tool. This research will help us learn how to build future systems that do allow for such customization."
		message = message + debrief
	
	return message
	
def process_results_dict(results_dict,c,conn):

	for worker_id in results_dict:
		assignment_id = str(results_dict[worker_id]["assignment_id"])
		payment = str(results_dict[worker_id]["payment"])
		message = results_dict[worker_id]["message"]
		q = "update subjects set assignment_id = '%s', payment = %s, message = '%s' where worker_id = '%s'" % (assignment_id, payment, message, worker_id)
		c.execute(q)
		conn.commit()
		
	
db = "fantasy_baseball_analysis"
host = "localhost"
user = "fantasy_sports"
pw = "fantasy1234"

conn = mysql.connect(host,user,pw,db)
c = conn.cursor()

f = open("batchfile.csv", "r")
 
lines = f.readlines()
 
worker_id_field = 1
assignment_id_field = 0
 
results_dict = {}
 
for line in lines:
	items = line.split(",")
	worker_id = items[worker_id_field].strip()
	assignment_id = items[assignment_id_field].strip()
 	
	results_dict[worker_id] = {"assignment_id":assignment_id}
 	
	scores = get_scores(worker_id,c)
	results_dict[worker_id]["data"] = scores
	payment_amount = get_payment_amount(scores)	
	message = create_message(worker_id, assignment_id, scores, payment_amount,c)
	results_dict[worker_id]["message"] = message
	results_dict[worker_id]["payment"] = payment_amount
f.close()
	
process_results_dict(results_dict,c, conn)	
	
		
		